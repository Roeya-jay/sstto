import streamlit as st
import requests
from bs4 import BeautifulSoup
import pandas as pd

# 定义抓取股票数据的函数
def get_stock_data(stock_id):
   url = f'https://www.cnyes.com/twstock/{stock_id}'
   response = requests.get(url)
   soup = BeautifulSoup(response.text, 'html.parser')

   # 从网页中提取所需的数据
   stock_data = {}
   stock_data['股票代号'] = stock_id
   stock_data['名称'] = soup.find('h1', {'class': 'tw-stock-h1'}).text.strip()
   stock_data['成交量'] = int(soup.find('span', {'data-key': 'Volume'}).text.replace(',', ''))
   stock_data['开盘价'] = float(soup.find('span', {'data-key': 'Open'}).text.replace(',', ''))
   stock_data['最高价'] = float(soup.find('span', {'data-key': 'High'}).text.replace(',', ''))
   stock_data['最低价'] = float(soup.find('span', {'data-key': 'Low'}).text.replace(',', ''))
   stock_data['收盘价'] = float(soup.find('span', {'data-key': 'Close'}).text.replace(',', ''))

   return stock_data

# 初始化股票列表
if 'stock_list' not in st.session_state:
   st.session_state.stock_list = ['2330', '2317', '6505']  # 初始股票代号，可以根据需要增加

# Streamlit应用
st.title("隔日冲选股程序")

# 创建一个空的DataFrame来存储所有股票的数据
all_data = pd.DataFrame()

# 获取每支股票的数据
for stock in st.session_state.stock_list:
   stock_data = get_stock_data(stock)
   all_data = all_data.append(stock_data, ignore_index=True)

# 增加一列计算当日涨幅
all_data['涨幅'] = (all_data['收盘价'] - all_data['开盘价']) / all_data['开盘价'] * 100

# 根据成交量排序，选取成交量最大的股票
top_volume_stocks = all_data.sort_values(by='成交量', ascending=False).head(20)

# 筛选收盘价接近最高价，且涨幅显著的股票
top_volume_stocks = top_volume_stocks[(top_volume_stocks['收盘价'] > 0.95 * top_volume_stocks['最高价']) &
                                     (top_volume_stocks['涨幅'] > 2)]

# 根据涨幅排序
top_stocks = top_volume_stocks.sort_values(by='涨幅', ascending=False)

# 选择前三名作为隔日冲标的
selected_stocks = top_stocks.head(3)

# 显示选中的股票
st.subheader("隔日冲标的股票")
st.write(selected_stocks[['股票代号', '名称', '成交量', '开盘价', '最高价', '最低价', '收盘价', '涨幅']])

# 允许用户输入新的股票代号并添加到列表中
new_stock = st.text_input("输入股票代号并添加到列表中:")
if st.button("添加股票"):
   if new_stock and new_stock not in st.session_state.stock_list:
       st.session_state.stock_list.append(new_stock)
       st.experimental_rerun()
   else:
       st.warning("请输入有效的股票代号。")